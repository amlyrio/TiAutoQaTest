using System;

public class Triangle
{
    //methods
    
    //Constructor
    public Triangle()
    {
        xA = 0;
        yA = 0;
        xB = 0;
        yB = 0;
        xC = 0;
        yC = 0;
    }
    
    //Destructor
    ~Triangle(){}
    
    //attributes
    public double xA;
    public double yA;
    public double xB;
    public double yB;
    public double xC;
    public double yC;
}

public class TechTask
{
    public static void Main(string[] args)
    {
        //instantiate triangle
        Triangle T = new Triangle();
        
        // Read xA from keyboard
        Console.WriteLine ("Enter coordinate x of dot A:");
        T.xA = Convert.ToDouble(Console.ReadLine());
        
        // Read yA from keyboard
        Console.WriteLine ("Enter coordinate y of dot A:");
        T.yA = Convert.ToDouble(Console.ReadLine());
        
        // Read xB from keyboard
        Console.WriteLine ("Enter coordinate x of dot B:");
        T.xB = Convert.ToDouble(Console.ReadLine());
        
        // Read yB from keyboard
        Console.WriteLine ("Enter coordinate y of dot B:");
        T.yB = Convert.ToDouble(Console.ReadLine());
        
        // Read xC from keyboard
        Console.WriteLine ("Enter coordinate x of dot C:");
        T.xC = Convert.ToDouble(Console.ReadLine());
        
        // Read yC from keyboard
        Console.WriteLine ("Enter coordinate y of dot C:");
        T.yC = Convert.ToDouble(Console.ReadLine());
        
        double distAB = Math.Sqrt((T.xB-T.xA)*(T.xB-T.xA) + (T.yB-T.yA)*(T.yB-T.yA));
        
        Console.WriteLine ("Length of AB is: " + distAB);
        
        double distAC =  Math.Sqrt((T.xC-T.xA)*(T.xC-T.xA) + (T.yC-T.yA)*(T.yC-T.yA));
        
        Console.WriteLine ("Length of AC is: " + distAC);
        
         double distBC =  Math.Sqrt((T.xC-T.xB)*(T.xC-T.xB) + (T.yC-T.yB)*(T.yC-T.yB));
        
        Console.WriteLine ("Length of BC is: " + distBC);
        
        //equilateral
        if (distAB == distAC && distAB == distBC && distAC == distBC)
        {
            Console.WriteLine ("Triangle is 'Equilateral'");
        }
        else
        {
            Console.WriteLine ("Triangle is NOT 'Equilateral'");
        }
        
        //isosceles
        if ((distAB == distAC && distAB != distBC) || 
            (distAC == distBC && distAC != distAB) ||
            (distAB == distBC && distAB != distAC))
        {
            Console.WriteLine ("Triangle is 'Isosceles'");
        }
        else
        {
            Console.WriteLine ("Triangle is NOT 'Isosceles'");
        }
        //right
        double delta = 0.01;
        
        if (distBC * distBC - (distAB * distAB + distAC * distAC) <= delta )
        {
            Console.WriteLine ("Triangle is 'Right'");
        }
        else
        {
            Console.WriteLine ("Triangle is NOT 'Right'");
        }
        
        double perimeter = distAB + distAC + distBC;
         Console.WriteLine ("The perimeter of the triangle is " + perimeter);
         
       int i = 0; 
       Console.WriteLine ("Parity numbers in range from 0 to triangle perimeter:");
       while (i <= perimeter)
       {
           Console.WriteLine (i);
           i = i + 2;
       }
    }
}